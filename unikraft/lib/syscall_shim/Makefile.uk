$(eval $(call addlib_s,libsyscall_shim,$(CONFIG_LIBSYSCALL_SHIM)))

LIBSYSCALL_SHIM_INCLUDES_PATH := $(LIBSYSCALL_SHIM_BUILD)/include/uk/bits

LIBSYSCALL_SHIM_PHONY_SRC := syscall_map.h syscall_stubs.h syscall_nrs.h
LIBSYSCALL_SHIM_PHONY_SRC := $(addprefix $(LIBSYSCALL_SHIM_INCLUDES_PATH)/, $(LIBSYSCALL_SHIM_PHONY_SRC))
LIBSYSCALL_SHIM_PHONY_SRC += $(LIBSYSCALL_SHIM_BUILD)/provided_syscalls.h.in
LIBSYSCALL_SHIM_PHONY_SRC_NEW := $(addsuffix .new, $(LIBSYSCALL_SHIM_PHONY_SRC))

LIBSYSCALL_SHIM_GEN_SRC := $(LIBSYSCALL_SHIM_INCLUDES_PATH)/provided_syscalls.h \
		$(LIBSYSCALL_SHIM_BUILD)/syscall_entry.c

UK_PREPARE-$(CONFIG_LIBSYSCALL_SHIM) += $(LIBSYSCALL_SHIM_PHONY_SRC) $(LIBSYSCALL_SHIM_GEN_SRC)

LIBSYSCALL_SHIM_TEMPL := $(LIBSYSCALL_SHIM_BASE)/arch/$(CONFIG_UK_ARCH)/syscall.h.in

$(if $(shell mkdir -p $(LIBSYSCALL_SHIM_INCLUDES_PATH) && \
	cd $(LIBSYSCALL_SHIM_INCLUDES_PATH) >/dev/null && pwd),,\
		$(error could not create directory $1))

.PHONY: $(LIBSYSCALL_SHIM_PHONY_SRC_NEW)

$(LIBSYSCALL_SHIM_PHONY_SRC): %: %.new
	@cmp -s $^ $@; if [ $$? -ne 0 ]; then cp $^ $@; fi

$(LIBSYSCALL_SHIM_INCLUDES_PATH)/syscall_nrs.h.new:
	$(call build_cmd,GEN,libsyscall_shim,$(notdir $@), \
		$(AWK) -f $(LIBSYSCALL_SHIM_BASE)/gen_syscall_nrs.awk \
		$(LIBSYSCALL_SHIM_TEMPL) > $@)

$(LIBSYSCALL_SHIM_INCLUDES_PATH)/syscall_map.h.new:
	$(call build_cmd,GEN,libsyscall_shim,$(notdir $@), \
		$(AWK) -f  $(LIBSYSCALL_SHIM_BASE)/gen_syscall_map.awk \
		$(LIBSYSCALL_SHIM_TEMPL) > $@)

$(LIBSYSCALL_SHIM_INCLUDES_PATH)/provided_syscalls.h: $(LIBSYSCALL_SHIM_BUILD)/provided_syscalls.h.in
	$(call build_cmd,GEN,libsyscall_shim,$(notdir $@), \
		$(AWK) -F '-' -f  $(LIBSYSCALL_SHIM_BASE)/gen_provided.awk \
		$^ > $@)

$(LIBSYSCALL_SHIM_BUILD)/syscall_entry.c: $(LIBSYSCALL_SHIM_BUILD)/provided_syscalls.h.in $(LIBSYSCALL_SHIM_BASE)/gen_entry.awk
	$(call build_cmd,GEN,libsyscall_shim,$(notdir $@), \
		$(AWK) -F '-' -f $(LIBSYSCALL_SHIM_BASE)/gen_entry.awk $< > $@ && \
		cat $(LIBSYSCALL_SHIM_BASE)/entry.c.in_end >> $@)

$(LIBSYSCALL_SHIM_BUILD)/provided_syscalls.h.in.new:
	$(call build_cmd,GEN,libsyscall_shim,$(notdir $@), \
		echo $(UK_PROVIDED_SYSCALLS-y) | tr ' ' '\n' > $@)

$(LIBSYSCALL_SHIM_INCLUDES_PATH)/syscall_stubs.h.new:
	$(call build_cmd,GEN,libsyscall_shim,$(notdir $@), \
		$(AWK) -f $(LIBSYSCALL_SHIM_BASE)/gen_stubs.awk \
		$(LIBSYSCALL_SHIM_TEMPL) > $@)

CINCLUDES-$(CONFIG_LIBSYSCALL_SHIM)   += -I$(LIBSYSCALL_SHIM_BUILD)/include
CXXINCLUDES-$(CONFIG_LIBSYSCALL_SHIM) += -I$(LIBSYSCALL_SHIM_BUILD)/include
CINCLUDES-y   += -I$(LIBSYSCALL_SHIM_BASE)/include
CXXINCLUDES-y += -I$(LIBSYSCALL_SHIM_BASE)/include

LIBSYSCALL_SHIM_SRCS-y += $(LIBSYSCALL_SHIM_BUILD)/syscall_entry.c

LIBSYSCALL_SHIM_CLEAN = $(LIBSYSCALL_SHIM_PHONY_SRC) $(LIBSYSCALL_SHIM_PHONY_SRC_NEW) $(LIBSYSCALL_SHIM_GEN_SRC) $(LIBSYSCALL_SHIM_GEN_SRC)
